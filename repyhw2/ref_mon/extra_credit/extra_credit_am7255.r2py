BUFFER = []
mycontext['lock']= createlock()



class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo

  def readat(self,bytes,offset):
    mycontext['lock'].acquire(True)
    BUFFER.append("readat")
    mycontext['lock'].release()
    return self.privilegedfo.readat(bytes,offset)

  def writeat(self,data,offset):
    mycontext['lock'].acquire(True)
    BUFFER.append("writeat")
    if (offset == 0):
        if data.startswith("pOwnd"):
          raise ValueError
    elif (offset== 1):
        if data.startswith("pOwnd"):
          raise ValueError
    elif (offset== 2):
        if data.startswith("pOwnd"):
          raise ValueError
    elif (offset== 3):
        if data.startswith("pOwnd"):
          raise ValueError
    elif (offset== 4):
        if data.startswith("pOwnd"):
          raise ValueError
    else:
      BUFFER.append("writeat")
      return self.privilegedfo.writeat(data,offset)
    mycontext['lock'].release()
  
  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()


def secure_openfile(filename, create):
  mycontext['lock'].acquire(True)
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  mycontext['lock'].release()
  return SecureFile(privilegedfo)


# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()