# Andrew Zarenberg (az1148)
# 
# This code ensures the user cannot write "MZ" at the beginning of a file when
# using the file.writeat(data, offset) function.
#
# If the offset is >= 2, then it immediately writes it to the file since there
# is no possibility of ending with "MZ" at the beginning
# If the offset is 0 and "MZ" is the first 2 characters of the data argument,
# it throws an exception.
# If the offset is 0 and the data is "M", it then reads the 2nd character of the
# file and throws an error if it is a "Z"
# If the offset is 1 and the first character in the data argument is "Z", it 
# then reads the 1st character of the file and throws an error if it is an "M"
#
# This code ONLY reads the file under very limited cases, thus satisfying the
# efficiency requirement.


TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


class SafeFile():
    def __init__(self, file):
      	self.file = file

    def writeat(self, data, offset):
    	if(offset < 2):
	    
	    # check to see if attempting to write MZ all at once
	    if(offset == 0 and data[:2] == "MZ"):
	        raise ValueError("You can't write that")

	    # check for writing "M" when the 2nd character is already "Z"
	    elif(offset == 0 and data == "M" and self.file.readat(1,1) == "Z"):
	        raise ValueError("You can't write that")

	    # check for writing "Z" when the 1st character is already "M"
	    elif(offset == 1 and data[:1] == "Z" and self.file.readat(1,0) == "M"):
	        raise ValueError("You can't write that")

        return self.file.writeat(data, offset)


    def close(self):
        return self.file.close()

          

safe_file_def = {"obj-type":SafeFile,
                 "name":"SafeFile",
                 "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:None,TARGET:SafeFile.writeat},
		 "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SafeFile.close}
		 }


def safe_openfile(fname, create):
    f = openfile(fname, create)
    return SafeFile(f)


CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:safe_file_def,TARGET:safe_openfile}


secure_dispatch_module()