"""This security layer interposes on a textfile and gives it open, close, read and write access. However a user cannot write 'MZ' letters to the documen and if a user tries to, the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python .We give the security layer an application to 	run. This security layer never runs explicitly but instead interposes functions from above layers."""	

# This stores a list of the calls the application makes.
BUFFER = []

#Class containing all the functions related to writing, reading and closing the file.
class SecureFile():
  
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo

  #Function to read data from the file.
  def readat(self,bytes,offset):
    BUFFER.append("readat")
    return self.privilegedfo.readat(bytes,offset)

  #Function to write data to the file and if there is "MZ" in data the function would raise an exception 
  def writeat(self,data,offset):
    BUFFER.append("writeat")
    if "MZ" in data:   #Checks if the data contains "MZ" in it's contents
      raise ValueError #ValueError is raise if the data contains "MZ" in its contents
    else:
      BUFFER.append("writeat")
      return self.privilegedfo.writeat(data,offset)
	
  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()

#Function to open the file securely and pass the file to the class SecureFile()
def secure_openfile(filename, create):
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)

#Used to set the security layer so that the application calls it instead of the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile, "name":"SecureFile", "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat}, "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat}, "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}}

#Map the "secure_openfile" function to the "openfile" API function here respectively
CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

#Only need to be called once every program
secure_dispatch_module()
