"""

EXAMPLE STARTED FROM  https://seattle.poly.edu/wiki/EducationalAssignments/SecurityLayerPartOne


This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user cannot start the document with the letters,
MZ.
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers.

"""	

# This is just an example global variable.   It stores a list of the calls the application makes.
BUFFER = []


class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo
    self.lock = createlock()

  def readat(self,bytes,offset):
    BUFFER.append("readat")
    return self.privilegedfo.readat(bytes,offset)

  def writeat(self,data,offset):
    #Adds a lock on writing to prevent users from abusing threads and time of use vs time of check
    self.lock.acquire(True)

    BUFFER.append("writeat")
    if data.startswith("MZ") and (offset == 0):	
      raise ValueError("Cannot start file with MZ!")

    #Blocks writing M to beginning of file to prevent from writing a single M then a single Z to the file
    elif data.startswith("M") and (offset == 0): 
      raise ValueError("Cannot start file with MZ!")
    elif data.startswith("Z") and (offset == 1): 
      raise ValueError("Cannot start file with MZ!")

    #prevent abusing C strings and writing Null bytes to start and MZ after the first 2 bytes
    elif data.startswith("\x00") and (offset == 0): 
      raise ValueError("Cannot start file with Null Byte!")

    else:
      BUFFER.append("writeat")

      #read original value in case we need to rewrite
      original = self.privilegedfo.readat(2, 0)

      #do users write
      self.privilegedfo.writeat(data,offset)

      #check the beginning of the file again and see if it is MZ
      tmp = self.privilegedfo.readat(2, 0)

      if tmp == "MZ":
        #check if file orignally contained MZ
        if original != "MZ":
          #if so rewrite the original bytes and raise exception
          self.privilegedfo.writeat(original,0)
          raise ValueError("Cannot start file with MZ!")

      self.lock.release()
      return None
	
  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()


def secure_openfile(filename, create):
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)


# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()