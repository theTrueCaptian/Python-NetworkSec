#avs395 
#checks file for anything with p0wnd and raises an exception if it does
#uses locks 	

# This is just an example global variable.   It stores a list of the calls the application makes.

BUFFER = []
class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo

  def readat(self,bytes,offset):
    my_lock.acquire(True)
    BUFFER.append("readat")
    return self.privilegedfo.readat(bytes,offset)
    my_lock.release()

  def writeat(self,data,offset):
    my_lock.acquire(True)
    BUFFER.append("writeat")
    if data.startswith("p0wnd") and ((type(offset) is int) | (type(offset) is long) | (type(offset) is str)):
      raise ValueError("Cannot write p0wnd anywhere in the file!")
    else:
      return self.privilegedfo.writeat(data,offset)
    my_lock.release()  
	
  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()

def secure_openfile(filename, create):
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)


# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

class Lock():
  def __init__(self,lock):
    self.lock = lock

  def acquire(self, blocking):
    return self.lock.acquire(blocking)

  def release(self):
    return self.lock.release()

sec_lock_def = {"obj-type":Lock,
                  "name":"Lock",
                  "acquire":{TYPE:FUNC,ARGS:(bool,),RETURN:bool,EXCP:None,TARGET:Lock.acquire},                  
                  "release":{TYPE:FUNC,ARGS:None,RETURN:None,EXCP:Exception,TARGET:Lock.release},
                 }

def secure_lock():
  l = createlock()
  return Lock(l)

CHILD_CONTEXT_DEF["createlock"] = {TYPE:FUNC,ARGS:None,EXCP:None,RETURN:sec_lock_def,TARGET:secure_lock}

my_lock = secure_lock()

secure_dispatch_module()