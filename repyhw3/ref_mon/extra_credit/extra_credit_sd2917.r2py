"""
This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user cannot write the document with the letters,
p0wnd.
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers.

"""	

"""
The sample security layer program was not thread safe. We can make it 
thread safe by using locks.
"""

# This is just an example global variable.   It stores a list of the calls the application makes.
BUFFER = []


class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo
    self.lock = createlock() #To make the security layer thread safe

  def readat(self,bytes,offset):
    try:
        self.lock.acquire(True)
        BUFFER.append("readat")
        return self.privilegedfo.readat(bytes,offset)
    finally:
        self.lock.release()

  def writeat(self,data,offset):
    try:
        self.lock.acquire(True)
        BUFFER.append("writeat")
        str_term = "p0wnd"
        if str_term in data:	#This condition will check the string irrespective of offset value
            raise ValueError("Cannot write "p0wnd" in file!")
        else:
            BUFFER.append("writeat")
            return self.privilegedfo.writeat(data,offset)
    finally:
        self.lock.release()
	
  def close(self):
    try:
        self.lock.acquire(True)
        BUFFER.append("close")
        return self.privilegedfo.close()
    finally:
        self.lock.release()


def secure_openfile(filename, create):
    try:
        lock = createlock()
        lock.acquire(True)
        BUFFER.append("openfile")
        # Open a file from the layer below (likely the sandbox)
        privilegedfo = openfile(filename,create)
        return SecureFile(privilegedfo)
    finally:
        lock.release()
      


# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()
