lockfile = createlock()
BUFFER = []


class SecureFile():
  def __init__(self,privilegedfo,lockfile):
    self.privilegedfo = privilegedfo
    self.lockfile = lockfile

  def readat(self,bytes,offset):
    BUFFER.append("readat")
    return self.privilegedfo.readat(bytes,offset)


  def writeat(self,data,offset):    
    BUFFER.append("writeat")
    if self.lockfile.acquire(True):   
      if data.startswith('MZ') and (offset ==0):
        self.lockfile.release()
        raise ValueError("Cannot start file with MZ!")        
      elif self.privilegedfo.readat(1,0) == 'M' and data.startswith('Z') and (offset ==1):
        self.lockfile.release()
        raise ValueError("Cannot start file with MZ!")        
      else:
        BUFFER.append("writeat")
        self.lockfile.release()
        return self.privilegedfo.writeat(data,offset)
        
  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()

def secure_openfile(filename, create):
  #lockfile = createlock()
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo,lockfile)

# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()
