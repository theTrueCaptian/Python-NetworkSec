"""
Robert Lagomarsino
Rwl251@nyu.edu
Computer Security
Homework 7

"""	

# This is just an example global variable.   It stores a list of the calls the application makes.
BUFFER = []

class SecureFile():
  def __init__(self,privilegedfo):
    # A lock to make the program thread safe
    mycontext['lock'] = createlock()
    self.privilegedfo = privilegedfo

  def readat(self,bytes,offset):
    # lock whenever using the BUFFER or using the file!
    mycontext['lock'].acquire(True)
    BUFFER.append("readat")
    s = self.privilegedfo.readat(bytes,offset)
    mycontext['lock'].release()
    return s

  def writeat(self,data,offset):
    # lock whenever using the BUFFER or using the file!
    mycontext['lock'].acquire(True)
    BUFFER.append("writeat")
    # Stop the obvious write MZ directly to the beginning of the file
    if data.startswith("MZ") and (offset == 0):	
      raise ValueError("Cannot start file with MZ!")
      mycontext['lock'].release()
    # Stop a write of Z as the second letter if there's an M in front of it!
    elif data.startswith("Z") and (offset == 1) and self.readat(1,0) == "M":
      raise ValueError("Cannot start file with MZ!")
      mycontext['lock'].release()
    # Stop a write of only an M if there's a Z after it!
    elif data.startswith("M") and len(data) == 1 and (offset == 0) and self.readat(1,1) == "Z":
      raise ValueError("Cannot start file with MZ!")
      mycontext['lock'].release()
    else:
      BUFFER.append("writeat")
      s = self.privilegedfo.writeat(data,offset)
      mycontext['lock'].release()
      return s
	
  def close(self):
    # lock whenever using the BUFFER or using the file!
    mycontext['lock'].acquire(True)
    BUFFER.append("close")
    s = self.privilegedfo.close()
    mycontext['lock'].release()
    return s


def secure_openfile(filename, create):
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)


# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()